extends ../layouts/default

block intro

block content
	.app(style="position: relative")
		.row.column.expanded
			//- | [subnav]
			//- pre= contacts
		.row.expanded
			.column.medium-3.padding.sidebar(style="padding-top: 2em;")

				h6 Company
				h3= company.name
				br

				h6 Notes
				textarea.notes(name="", cols="30", rows="5") Uber Technologies Inc. is an American multinational online transportation network company headquartered in San Francisco, California.
				br

				h6 Filters
				for tag in ['public', 'customer', 'startup', 'relationship', 'management']
					span.label.secondary= tag
					&nbsp;
			.column.medium-9
				//- .row
					.column.medium-3
					.column.medium-3.text-right
				.row
					.column
						a.button.small.secondary.float-right(href="#" data-open="myModal" style="position: absolute; right: 2em; top: 2em;") + Add Contact
						div#viz(style="width: 100%; height: 100vh")
						pre= company

block css

block js
	//- script(src="https://cdn.jsdelivr.net/d3js/3.5.17/d3.js")
	script(src="https://cdn.jsdelivr.net/d3js/3.5.17/d3.js")
	script.
		var w = $('#viz').width() || 1000,
			h = $('#viz').height() || 800,
			node,
			link,
			root;

		var force = d3.layout.force()
			.on("tick", tick)
			.charge(-1500)
			.distance(150)
			//- .linkDistance(100)
			.gravity(0.1)
			//- .gravity(0.125)
			//- .gravity(100)
			.size([w, h]);

		//- var zoom = d3.behavior.zoom()
		//- 	.scaleExtent([1, 10])
		//- 	.on("zoom", zoomed);

		var vis = d3.select("#viz").append("svg:svg")
			.attr("width", '100%')
			.attr("height", h)
			.attr("viewBox", '0 0 ' + w + '' + h + '')
			.attr("preserveAspectRatio", "xMidYMid meet")

		var data = {
			"name": "",
			"image": "!{company.logo.url}",
			"title": "",
			"radius": 120,
			//- "children": "!{JSON.stringify(contacts)}"
			"children": [
				{
					"name": "Maxime Veron",
					"title": "Director of Nest Hardware Product Marketing",
					"image": "http://res.cloudinary.com/agiria/image/upload/v1469990672/yngvyfles81hvs9aj2ux.jpg",
					"radius": 80,
					"children": [
						{ "name": "" },
						{ "name": "" }
					]
				},
				{
					"name": "Connor Regan",
					"title": "Product Marketing",
					"image": "http://res.cloudinary.com/agiria/image/upload/v1469992245/qlmeeswaffmzomoq1bbk.jpg",
					"radius": 80,
					"children": [
						{ "name": "" },
						{ "name": "" },
						{ "name": "" }
					]
				},
				{
					"name": "Shubhi Rao",
					"title": "Vice President, Treasurer at Company",
					"image": "http://res.cloudinary.com/agiria/image/upload/v1469992177/ca9eyevm7u0jsnsiwh87.jpg",
					"radius": 80,
					"children": [
						{ "name": "" }
					]
				},
				{
					"name": "Jim Marocco",
					"title": "Vice President, Finance at Company",
					"image": "http://res.cloudinary.com/agiria/image/upload/v1469992329/issziuiu9epuszzhnnvm.jpg",
					"radius": 80,
					"children": [
						{ "name": "" },
						{ "name": "" },
						{ "name": "" },
						{ "name": "" },
						{ "name": "" }
					]
				}
			]
		}

		//- root = data;

		//- d3.json("flare.json", function(json) {
		  //- root = json;
		  root = data;
		  //- root.fixed = true;
		  //- root.x = w / 2;
		  //- root.y = h / 2;
		  update();
		  tick();
		//- });

		function update() {
		  var nodes = flatten(root),
			  links = d3.layout.tree().links(nodes);

		  // Restart the force layout.
		  force
			  .nodes(nodes)
			  .links(links)
			  .start();

		  // Update the links…
		  link = vis.selectAll("line.link")
			  .data(links, function(d) { return d.target.id; });

		  // Enter any new links.
		  link.enter().insert("svg:line", ".node")
			  .attr("class", "link")
			  .attr("x1", function(d) { return d.source.x; })
			  .attr("y1", function(d) { return d.source.y; })
			  .attr("x2", function(d) { return d.target.x; })
			  .attr("y2", function(d) { return d.target.y; })
			  .attr("stroke", "#ddd")
			  .attr("stroke-width", "1px");

		  // Exit any old links.
		  link.exit().remove();

		  // Update the nodes…
		  node = vis.selectAll("circle.node")
			  //- .data(nodes, function(d) { return d.id; })
			  .data(nodes, function(d) { return d.id; })
			  //- .style("fill", color);
			  .enter().append("g")
				.attr("class", "node")
				.call(force.drag)

		  //- node.transition()
			  //- .attr("r", 40);
			  //- .attr("stroke", "blue")

		  // Enter any new nodes.

			node.append("svg:pattern")
				.attr("id", function(d){ return "user_avatar_"+d.id })
				.attr("width", function(d){ return d.radius || 40 })
				.attr("height", function(d){ return d.radius || 40 })
				.attr("patternUnits", "userSpaceOnUse")
				.attr("patternTransform", function(d){ return "translate(-"+(d.radius || 40)/2+",-"+(d.radius || 40)/2+")" })
				.append("image")
					.attr("xlink:href", function(d){ return d.image || "/images/user.png"})
					.attr("x", 0)
					.attr("y", 0)
					.attr("width", function(d){ return d.radius || 40 })
					.attr("height", function(d){ return d.radius || 40 });

		  node.append("svg:circle")
			  .attr("class", "node")
			  .attr("cx", 0)
			  .attr("cy", 0)
			  .attr("r", function(d){ return (d.radius || 40) / 2 })
			  .style("fill", '#fff')
			  .style("fill", function(d){ return "url(#user_avatar_"+d.id+")" })
			  .style("stroke", '#ddd')
			  .style("stroke-width", 2)
			  .on("click", click)
			  //- .call(force.drag)

		 //-  node.append("image")
		 //-  	.attr("xlink:href", function(d){ return d.image || "/images/user.png"})
		 //-  	.attr("x", -20)
			//- .attr("y", -20)
			//- .attr("width", 40)
			//- .attr("height", 40);

		  node.append("text")
			//- .attr("dx", -20)
			.attr("dy", function(d){ return d.radius*0.75 || 40 })
			.attr("text-anchor", "middle")
			.attr("font-size", 12)
			.text(function(d) { return d.name });

		node.append("text")
			//- .attr("dx", -20)
			.attr("dy", function(d){ return (d.radius*0.75 || 40) + 14 })
			.attr('text-anchor', "middle")
			.attr("font-size", 10)
			.text(function(d) { return d.title });

		//- node.enter().append("svg:text")
		//- 	.attr("x", function(d) { return d.x; })
		//- 	.attr("y", function(d) { return d.y; })
		//-     .attr("dy", ".35em")
		//-     .text(function(d) { return d.name; });

		  // Exit any old nodes.
		  node.exit().remove();
		}

		function tick() {
		  link.attr("x1", function(d) { return d.source.x; })
			  .attr("y1", function(d) { return d.source.y; })
			  .attr("x2", function(d) { return d.target.x; })
			  .attr("y2", function(d) { return d.target.y; });

		  //- node.attr("cx", function(d) { return d.x; })
			  //- .attr("cy", function(d) { return d.y; });
		  node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
		}

		// Color leaf nodes orange, and packages white or blue.
		function color(d) {
		  return d._children ? "red" : d.children ? "#333" : "ccc";
		}

		// Toggle children on click.
		function click(d) {
		  //- if (d.children) {
		  //-   d._children = d.children;
		  //-   d.children = null;
		  //- } else {
		  //-   d.children = d._children;
		  //-   d._children = null;
		  //- }
		  //- update();
		}

		// Returns a list of all nodes under the root.
		function flatten(root) {
		  var nodes = [], i = 0;

		  function recurse(node) {
			if (node.children) node.size = node.children.reduce(function(p, v) { return p + recurse(v); }, 0);
			if (!node.id) node.id = ++i;
			nodes.push(node);
			return node.size;
		  }

		  root.size = recurse(root);
		  return nodes;
		}
		function zoomed() {
			container.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
		}

